#+title: Configurações
#+startup: content

* Geral
** Use system package
#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package
    :straight t)
#+end_src

Garante que dependências sejam cumpridas para que determinado pacote
seja carregado.

** Images
#+begin_src emacs-lisp
  (add-hook 'image-mode-hook '(lambda () (auto-revert-mode)))
#+end_src

Auto-revert para que as images sejam atualizadas automaticamente em
caso de mudança.

** PDF
#+begin_src emacs-lisp
  (add-hook 'pdf-view-mode-hook '(lambda () (auto-revert-mode)))
#+end_src

Auto-revert para que os arquivos PDF sejam atualizados automaticamente
em caso de mudança.

** Toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

Desativa toolbar para preservar espaço.

** Menubar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

Desativa menu bar também para preservar espaço.

** Scrollbar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

Desativa scroll bar porque não vai ser utilizada.

** Scroll mode
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

Muda o comportamento padrão de mover uma porção da página ao chegar
no final para mover uma linha por vez.

** Soft-wrap
#+begin_src emacs-lisp
(global-visual-line-mode 1)
#+end_src

Ativa soft-wrap para melhor visualização do texto.

** Line number mode
#+begin_src emacs-lisp
  (dolist (hook '(prog-mode-hook org-mode-hook))
    (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src

Mostra as linhas de texto para buffers em prog mode e org mode, pois em buffers
específicos, como ansi-term, sua utilização causa problemas.

** Tab
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4 
                tab-width 4
                indent-tabs-mode t)
#+end_src

Define tab para 4 espaços.

** Y-or-n-p
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Alias para simplificar confirmações.

** Subword
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
#+end_src

Subword trata uppercase no meio de uma string como palavras
separadas ao navegar.

** Pair-complete
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              ))
  (electric-pair-mode t)
#+end_src

Autocompleta parênteses, chaves e colchetes.

** Diretório de autosave
#+begin_src emacs-lisp
  (setq backup-directory-alist
            `(("." . ,(concat user-emacs-directory ".backups"))))
#+end_src

Agrupa todos os autosaves em uma pasta só, por critérios organizacionais.

* Bindings
** Kill buffer and window
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x j") 'kill-buffer-and-window)
#+end_src

* Org
** Configs
*** Org indent mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** Latex-preview
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

Aumenta o tamanho dos previews do latex em arquivos org em 200%.
** Babel
#+begin_src emacs-lisp
  (add-to-list 'org-src-lang-modes '("c++" . C++)) ;; alias for source

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (plantuml . t)
     (dot . t)
     (ditaa . t)
     (C . t))) ;; C also adds C++ and D
#+end_src
** Org superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :straight t
    :hook (org-mode . org-superstar-mode))
#+end_src

** Minted
#+begin_src emacs-lisp
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src

Define Minted como pacote padrão para export de códigos, substituindo verbatim.

** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure-system-package plantuml
    :straight t
    :defer t
    :custom
    (org-plantuml-jar-path (expand-file-name "/usr/share/java/plantuml/plantuml.jar"))
    (plantuml-default-exec-mode 'jar)
    :config
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))
#+end_src

** Beamer
#+begin_src emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :defer t
    :custom
    (org-roam-directory "~/Dropbox/org-roam")
    :hook
    (after-init . org-roam-mode))
  (setq org-roam-v2-ack t)
#+end_src

** Org-download
#+begin_src emacs-lisp
  (use-package org-download
    :straight t
    :defer t
    :init
    (org-download-enable)
    :custom
    (org-download-image-dir "./.org-download/")
    (org-download-screenshot-method "spectacle")
    :hook
    (dired-mode . org-download-enable))
#+end_src

Pacote que define funções para manipular imagens externas.

** Org-reveal
#+begin_src emacs-lisp
  (use-package org-reveal
    :straight t
    :defer t
    :custom
    (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+end_src
*** Htmlize
#+begin_src emacs-lisp
  (use-package htmlize
    :straight t)
#+end_src
* Visual
** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
    :straight t)
#+end_src

Pacote de ícones gerais.

** Tema
#+begin_src emacs-lisp
  (use-package darkokai-theme
    :straight t
    :config
    (load-theme 'darkokai t))
#+end_src

Seta o tema darkokai como padrão.

** Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :straight t
    :config
    (spaceline-helm-mode)
    (spaceline-emacs-theme)
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-projectile-root-on))
#+end_src

Spaceline com tema all the icons.

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :custom
    (dashboard-startup-banner 'logo)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-center-content t)
    (dashboard-items '((recents . 10)
                       (projects . 5)))
    :config
    (dashboard-setup-startup-hook))
#+end_src

*** Page break lines
#+begin_src emacs-lisp
  (use-package page-break-lines
    :straight t
    :init
    (global-page-break-lines-mode))
#+end_src

Substitui símbolo de quebras de linha por uma linha vazia.

* Utilidades
** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init
    (which-key-mode))
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :defer t
    :init (global-flycheck-mode))
#+end_src

Syntax checker global.

** Lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :defer t
    :after (which-key)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :custom
    (gc-cons-threshold 100000000)
    (read-process-output-max (* 1024 1024))
    :commands lsp
    :hook
    (lsp-mode . lsp-enable-which-key-integration))
#+end_src

*** Lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t
    :defer t
    :after lsp-mode
    :commands lsp-ui-mode
    :custom
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-doc-enable t))
#+end_src

*** Helm-lsp
#+begin_src emacs-lisp
  (use-package helm-lsp
    :straight t
    :defer t
    :after (lsp-mode helm)
    :commands helm-lsp-workspace-symbol)
#+end_src

** C/C++
#+begin_src emacs-lisp
  (use-package ccls
    :ensure-system-package ccls
    :straight t
    :defer t
    :hook
    ((c-mode c++-mode) . (lambda () (require 'ccls) (lsp)))
    :config
    (add-to-list 'lsp-enabled-clients 'ccls)
    :custom
    (lsp-clients-clangd-args '("-j=4" "--background-index" "-log=error"))
    (lsp-prefer-flymake nil))
#+end_src

** Python
#+begin_src emacs-lisp
  (use-package lsp-jedi
    :straight t
    :ensure-system-package jedi-language-server
    :config
    (with-eval-after-load "lsp-mode"
      (add-to-list 'lsp-disabled-clients 'pyls)
      (add-to-list 'lsp-enabled-clients 'jedi)))
#+end_src

** Jupyter
#+begin_src emacs-lisp
  (use-package jupyter
    :straight t
    :defer t
    :config
    (add-to-list 'load-path "/usr/bin/jupyter"))
#+end_src

** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :straight t
    :hook (java-mode . lsp)
    :config
    (add-to-list 'lsp-enabled-clients 'jdtls))
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode
    ("README\\.md\\'" . gfm-mode)
    ("\\.\\(md\\|markdown\\|mkd\\)\\'" . markdown-mode)
    :custom
    (markdown-command "multimarkdown"))
#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :defer t
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 3)
    :hook
    (prog-mode . company-mode))
#+end_src

Pacote de auto-complete.

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :defer t
    :config
    (use-package yasnippet-snippets
      :straight t)
    (yas-reload-all)
    :hook
    (prog-mode . yas-minor-mode))
#+end_src

Snippet para frameworks.

*** Lisp snippet
#+begin_src emacs-lisp
  (use-package common-lisp-snippets
    :straight t
    :defer t)
  (add-hook 'lisp-mode-hook 'yas-minor-mode)
#+end_src

*** Emacs-Lisp snippet
#+begin_src emacs-lisp
  (use-package el-autoyas
    :straight t
    :defer t
    :hook
    (org-mode . el-autoyas-enable))
#+end_src

** Company+Yasnippet
#+begin_src emacs-lisp
  (defun company-yasnippet-or-completion ()
    (interactive)
    (let ((yas-fallback-behavior nil))
      (unless (yas-expand)
        (call-interactively #'company-complete-common))))

  (add-hook 'company-mode-hook (lambda ()
    (substitute-key-definition 'company-complete-common
                               'company-yasnippet-or-completion
                               company-active-map)))
#+end_src

Funções para integração do company com yasnippet.

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :custom
    (projectile-mode t)
    :bind
    ("C-c p" . 'projectile-command-map))
#+end_src

Pacote para gerenciar projetos como um todo.

** Helm
#+begin_src emacs-lisp
  (use-package helm
    :straight t
    :config
    (helm-mode 1)
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("M-x" . 'helm-M-x)
    ("M-y" . 'helm-show-kill-ring)
    ("C-x b" . 'helm-mini))
#+end_src

Helm para funções de busca global.

*** Helm-swooper
#+begin_src emacs-lisp
  (use-package helm-swoop
    :straight t
    :after helm
    :custom
    (helm-swoop-pre-input-function
     (lambda ()
       (if mark-active
           (buffer-substring-no-properties (mark) (point))
         "")))
    :bind
    ("C-s" . helm-swoop)
    ("C-c h s" . helm-multi-swoop-all))
#+end_src

Pacote de busca de palavras em buffer.

*** Helm-descbinds
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :straight t
    :after helm
    :config
    (helm-descbinds-mode 1))
#+end_src

*** Helm-make
#+begin_src emacs-lisp
  (use-package helm-make
    :straight t
    :after helm
    :commands (helm-make helm-make-projectile))
#+end_src

Interface para criar makefiles através do Helm.

*** Helm-icons
#+begin_src emacs-lisp
  (use-package helm-icons
    :straight t
    :after (helm all-the-icons)
    :config
    (helm-icons-enable)
    :custom
    (helm-icons-provider 'all-the-icons))
#+end_src

*** Helm-projectile
#+begin_src emacs-lisp
  (use-package helm-projectile
    :straight t
    :after (helm projectile)
    :config
    (helm-projectile-on))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :defer t)
#+end_src

Pacote para integração com o git.

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :defer t
    :hook 
    (prog-mode . rainbow-delimiters-mode))
#+end_src

Pacote para highlight em escopos

** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :custom
    (undo-tree-visualizer-timestamps 1)
    (undo-tree-auto-save-history nil)
    :config
    (global-undo-tree-mode))
#+end_src

Pacote que define o histórico de alterações em uma árvore.

** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :hook
    (prog-mode . rainbow-mode)) 
#+end_src

Pacote para hightlight de cores em código hexadecimal.

** Expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind ("C-q" . er/expand-region))
#+end_src

** Multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :straight t
    :bind ("C->" . 'mc/mark-next-like-this)
    :bind ("C-<" . 'mc/mark-previous-like-this)
    :bind ("C-c q" . 'mc/mark-all-like-this))
#+end_src

Multiple cursors seleciona várias áreas do texto para serem editadas ao
mesmo tempo.
Faz uma boa sinergia com o pacote expand-region.

** Switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :straight t
    :bind
    ("C-x o" . 'switch-window))
#+end_src

Pacote switch window exibe um label para indicar a window desejada.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
#+end_src

Adicionalmente, Wind Move também se encontra ativo.

** PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :defer t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query)
    :hook
    (pdf-view-mode . (lambda() (display-line-numbers-mode -1))))
#+end_src

Ferramenta para melhor visualização e controle de PDFs.

** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :defer t
    :bind ("C-x t" . vterm-other-window))
#+end_src

** Move-text
#+begin_src emacs-lisp
  (use-package move-text
    :straight t
    :init (move-text-default-bindings))
#+end_src
