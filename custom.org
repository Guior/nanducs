* Geral
** Terminal
#+begin_src emacs-lisp
  (defvar terminalzito "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
	(interactive (list terminalzito)))
  (ad-activate 'ansi-term)
#+end_src
Definindo o ZSH como interpretador padrão para o ansi-term.
** Toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
Desativa toolbar para preservar espaço.
** Menubar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
Desativa menu bar também para preservar espaço.
** Scrollbar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
Desativa scroll bar porque não vai ser utilizada.
** Scroll mode
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

Muda o comportamento padrão de mover uma porção da página ao chegar
no final para mover uma linha por vez. 
** Soft-wrap
#+begin_src emacs-lisp
(global-visual-line-mode 1)
#+end_src
Ativa soft-wrap para melhor visualização do texto.
** Line number mode
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
#+end_src
Mostra as linhas de texto globalmente.
** Tab
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4 
                tab-width 4
                indent-tabs-mode t)
#+end_src
Define tab para 4 espaços.
** Y-or-n-p
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
Alias para simplificar confirmações.
** Subword
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
#+end_src

Subword trata uppercase no meio de uma string como palavras separadas ao navegar.
** Pair-complete
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              ))
  (electric-pair-mode t)
#+end_src

Autocompleta parênteses, chaves e colchetes.
* Bindings
** Kill buffer and window
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x j") 'kill-buffer-and-window)
#+end_src
** Abrir terminal 
#+begin_src emacs-lisp
(defun split-and-open-terminal () 
    (interactive)
    (call-interactively 'split-window-right)
    (call-interactively 'other-window)
    (call-interactively 'ansi-term))
(global-set-key (kbd "C-x t") 'split-and-open-terminal)
#+end_src
** Switch window
#+begin_src emacs-lisp
  (global-set-key (kbd "<C-tab>") 'other-window)
#+end_src
* Org
** Configs
*** Org indent mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** Source window 
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Abre source window (C-c ') na mesma janela.
** Org Bullets
#+begin_src emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
Bullets para deixas o org mode mais bonito.
* Visual
** Tema
#+begin_src emacs-lisp
(use-package darkokai-theme
    :ensure t
    :init
    (load-theme 'darkokai t))
#+end_src
Seta o tema darkokai como padrão.
** Spaceline
#+begin_src emacs-lisp
(use-package spaceline
    :ensure t)
(use-package spaceline-config
    :ensure spaceline
    :config
    (spaceline-emacs-theme))
#+end_src
Spaceline com tema emacs padrão.
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
    :ensure t
    :config
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
	(setq dashboard-startup-banner "~/.emacs.d/img/banner.png")
    :init
    (dashboard-setup-startup-hook))
#+end_src
Lindo dashboard 
*** Page break lines
#+begin_src emacs-lisp
(use-package page-break-lines
    :ensure t
    :init
    (turn-on-page-break-lines-mode))
#+end_src
Substitui símbolo de quebras de linha por uma linha vazia.
*** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
    :ensure t)
#+end_src
Autoexplicativo.
* Utilidades
** Which key
#+begin_src emacs-lisp
(use-package which-key
    :ensure t
    :config
    (which-key-mode 1))
#+end_src
Which-key para listar comandos com C-X. 
** Company
#+begin_src emacs-lisp
  (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3)
      (with-eval-after-load 'company
          (add-hook 'prog-mode-hook 'company-mode)))
#+end_src
Pacote de auto-complete

*** Irony
#+begin_src emacs-lisp
(use-package company-irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode))
#+end_src

*** Jedi
#+begin_src emacs-lisp
  (use-package company-jedi
    :config
    (setq jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (setq jedi:use-shortcuts t)
    (defun config/enable-company-jedi ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'config/enable-company-jedi))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
      :ensure t
      :config
      (use-package yasnippet-snippets
          :ensure t)
      (yas-reload-all)
      (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src
Snippet para frameworks.
*** Lisp snippet
#+begin_src emacs-lisp
(use-package common-lisp-snippets
    :ensure t)
(add-hook 'lisp-mode-hook 'yas-minor-mode)
#+end_src
*** Emacs-Lisp snippet
#+begin_src emacs-lisp
  (use-package el-autoyas
    :ensure t
    :config
    (add-hook 'org-mode 'el-autoyas-enable))
#+end_src
*** Javascript e React snippet 
#+begin_src emacs-lisp
(use-package js-react-redux-yasnippets
    :ensure t)
#+end_src
** Company+Yasnippet
#+begin_src emacs-lisp
(defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))
#+end_src
Funções para integração do company com yasnippet.
** Helm
#+begin_src emacs-lisp
(use-package helm
    :ensure t
	:config
	(helm-mode 1))
#+end_src
Helm para funções de busca..

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-f") 'helm-find-files) ;; helm-find-files
(global-set-key (kbd "M-x") 'helm-M-x)            ;; helm-fuzzy-match
(global-set-key (kbd "M-y") 'helm-show-kill-ring) ;; helm-kill-ring
(global-set-key (kbd "C-x b") 'helm-mini)         ;; helm-mini
#+end_src
Bindings das keys pro helm.
*** Swiper-helm
#+begin_src emacs-lisp
(use-package swiper-helm
    :ensure t
    :bind ("C-s" . swiper-helm))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
Pacote para integração com o git.
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+end_src
Detecção e highlightning de erros.

*** C++ 
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
#+end_src
** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config 
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

Pacote para highlight em escopos
** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    (setq-default undo-tree-visualizer-diff 1)
    (setq-default undo-tree-auto-save-history 1) 
    (setq-default undo-tree-visualizer-timestamps 1))
#+end_src
Pacote que define o histórico de alterações em uma árvore.
** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1)) 
#+end_src

Pacote para hightlight de cores em código hexadecimal
* Diminish
#+begin_src emacs-lisp
  (use-package diminish
      :ensure t
      :init
      (diminish 'helm-mode)
      (diminish 'which-key-mode)
      (diminish 'visual-line-mode)
      (diminish 'yas-minor-mode)
      (diminish 'page-break-lines-mode)
      (diminish 'company-mode)
      (diminish 'org-indent-mode)
      (diminish 'undo-tree-mode)
      (diminish 'irony-mode)
      (diminish 'abbrev-mode))
#+end_src

Pacote para esconder os modos da
  
