* Geral
** Terminal
#+begin_src emacs-lisp
  (defvar terminalzito "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
	(interactive (list terminalzito)))
  (ad-activate 'ansi-term)
#+end_src
Definindo o ZSH como interpretador padrão para o ansi-term.
** Toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
Desativa toolbar para preservar espaço.
** Menubar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
Desativa menu bar também para preservar espaço.
** Scrollbar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
Desativa scroll bar porque não vai ser utilizada.
** Scroll mode
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

Muda o comportamento padrão de mover uma porção da página ao chegar
no final para mover uma linha por vez. 
** Soft-wrap
#+begin_src emacs-lisp
(global-visual-line-mode 1)
#+end_src
Ativa soft-wrap para melhor visualização do texto.
** Line number mode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode)))
#+end_src
Mostra as linhas de texto para buffers em prog mode, pois em buffers específicos, como ansi-term, sua utilização causa problemas.
** Tab
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4 
                tab-width 4
                indent-tabs-mode t)
#+end_src
Define tab para 4 espaços.
** Y-or-n-p
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
Alias para simplificar confirmações.
** Subword
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
#+end_src

Subword trata uppercase no meio de uma string como palavras separadas ao navegar.
** Pair-complete
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              ))
  (electric-pair-mode t)
#+end_src

Autocompleta parênteses, chaves e colchetes.
** Diretório de autosave
#+begin_src emacs-lisp
  (setq backup-directory-alist
            `(("." . ,(concat user-emacs-directory ".backups"))))
#+end_src

Agrupa todos os autosaves em uma pasta só, por critérios organizacionais.

* Bindings
** Kill buffer and window
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x j") 'kill-buffer-and-window)
#+end_src
** Abrir terminal 
#+begin_src emacs-lisp
  (defun split-and-open-terminal () 
      (interactive)
      (call-interactively 'split-window-right)
      (call-interactively 'other-window)
      (call-interactively 'ansi-term))
  (global-set-key (kbd "C-x t") 'split-and-open-terminal)
#+end_src
* Org
** Configs
*** Org indent mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** Latex-preview
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
** Babel
#+begin_src emacs-lisp
  (add-to-list 'org-src-lang-modes '("c++" . C++)) ;; alias for source

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (plantuml . t)
     (dot . t)
     (ditaa . t)
     (C . t))) ;; C also adds C++ and D
#+end_src

** Org Bullets
#+begin_src emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
Bullets para deixas o org mode mais bonito.
** Minted
#+begin_src emacs-lisp
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src

Define Minted como pacote padrão para export de códigos, substituindo Verbatim.
** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :custom
    (org-plantuml-jar-path (expand-file-name "~/Downloads/plantuml.jar"))
    :config
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))
#+end_src
** Beamer
#+begin_src emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+end_src
** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/Dropbox/org-roam")
    :hook
    (after-init . org-roam-mode))
#+end_src
** Org-download
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :custom
    (org-download-image-dir "./.org-download/")
    (org-download-screenshot-method "spectacle")
    :config
    (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src
* Visual
** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
    :ensure t)
#+end_src
Autoexplicativo.
** Tema
#+begin_src emacs-lisp
  (use-package darkokai-theme
    :ensure t
    :config
    (load-theme 'darkokai t))
#+end_src
Seta o tema darkokai como padrão.
** Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (spaceline-helm-mode)
    (spaceline-emacs-theme)
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-projectile-root-on))
#+end_src
Spaceline com tema all the icons.

Aparentemente o helm está causando memory leak, por hora, a seguinte config será setada para previnir isso:

#+begin_src emacs-lisp
  (setq helm-ff-keep-cached-candidates nil)
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
	  :ensure t
	  :custom
	  (dashboard-set-heading-icons t)
	  (dashboard-set-file-icons t)
	  (dashboard-startup-banner "~/.emacs.d/img/banner.png")
	  (dashboard-center-content t)
	  (dashboard-items '((recents . 10)
						 (projects . 5)))
	  :config
	  (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
Lindo dashboard 
*** Page break lines
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :init
    (turn-on-page-break-lines-mode))
#+end_src
Substitui símbolo de quebras de linha por uma linha vazia.
* Utilidades
** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 3)
    :hook
    (prog-mode . company-mode))
#+end_src
Pacote de auto-complete

*** Irony
#+begin_src emacs-lisp
  (use-package irony
    :ensure t
    :hook
    (c++-mode . irony-mode)
    (c-mode . irony-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+end_src

*** Jedi
#+begin_src emacs-lisp
  (use-package company-jedi
    :ensure t
    :custom
    (jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
    (jedi:complete-on-dot t)
    (jedi:use-shortcuts t)
    :config
    (defun config/enable-company-jedi ()
      (add-to-list 'company-backends 'company-jedi))
    :hook
    (python-mode . jedi:setup)
    (python-mode . config/enable-company-jedi))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    :hook
    (prog-mode . yas-minor-mode))
#+end_src
Snippet para frameworks.
*** Lisp snippet
#+begin_src emacs-lisp
(use-package common-lisp-snippets
    :ensure t)
(add-hook 'lisp-mode-hook 'yas-minor-mode)
#+end_src
*** Emacs-Lisp snippet
#+begin_src emacs-lisp
  (use-package el-autoyas
    :ensure t
    :hook
    (org-mode . el-autoyas-enable))
#+end_src
*** Javascript e React snippet 
#+begin_src emacs-lisp
  (use-package js-react-redux-yasnippets
    :defer t)
#+end_src
** Company+Yasnippet
#+begin_src emacs-lisp
(defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))
#+end_src
Funções para integração do company com yasnippet.
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-mode t)
    :bind
    ("C-c p" . 'projectile-command-map))
#+end_src
** Helm
#+begin_src emacs-lisp
	(use-package helm
	  :ensure t
	  :config
	  (helm-mode 1)
	  :bind
	  ("C-x C-f" . 'helm-find-files)
	  ("M-x" . 'helm-M-x)
	  ("M-y" . 'helm-show-kill-ring)
	  ("C-x b" . 'helm-mini))
#+end_src
Helm para funções de busca..

*** Helm-swooper
#+begin_src emacs-lisp
  (use-package helm-swoop
    :ensure t
    :custom
    (helm-swoop-pre-input-function
     (lambda ()
       (if mark-active
           (buffer-substring-no-properties (mark) (point))
         "")))
    :bind ("C-s" . helm-swoop))
#+end_src

Pacote de busca de palavras.
*** Helm-system-packages
#+begin_src emacs-lisp
    (use-package helm-system-packages
      :ensure t)
#+end_src

Integração do helm com package managers.

*** Helm-descbinds
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure t
    :config
    (helm-descbinds-mode 1))
#+end_src

*** Helm-make
#+begin_src emacs-lisp
  (use-package helm-make
    :ensure t
    :commands (helm-make helm-make-projectile))
#+end_src

Interface para criar makefiles através do Helm.

*** Helm-icons
#+begin_src emacs-lisp
  (use-package helm-icons
    :ensure t
    :config
    (helm-icons-enable))
#+end_src
*** Helm-projectile
#+begin_src emacs-lisp
  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
Pacote para integração com o git.
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode))
#+end_src
Detecção e highlightning de erros.

*** C++ 
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++17")))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook 
    (prog-mode . rainbow-delimiters-mode))
#+end_src

Pacote para highlight em escopos
** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :custom
    (undo-tree-visualizer-timestamps 1)
    :config
    (global-undo-tree-mode))
#+end_src

Pacote que define o histórico de alterações em uma árvore.
** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook
    (prog-mode . rainbow-mode)) 
#+end_src

Pacote para hightlight de cores em código hexadecimal.
** Expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+end_src
** Multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind ("C->" . 'mc/mark-next-like-this)
    :bind ("C-<" . 'mc/mark-previous-like-this)
    :bind ("C-c q" . 'mc/mark-all-like-this))
#+end_src

Multiple cursors seleciona várias áreas do texto para serem editadas ao mesmo tempo.
Faz uma boa sinergia com o pacote expand-region.

** Switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :bind
    ("C-x o" . 'switch-window))
#+end_src


** PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query))
#+end_src

Ferramenta para melhor visualização e controle de PDFs.

